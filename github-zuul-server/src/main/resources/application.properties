server.port=8762
spring.application.name=zuul-server
eureka.client.service-url.default-zone=http://localhost:8761/eureka/

# A prefix that can added to beginning of all requests. 
#zuul.prefix=/api

# Disable accessing services using service name (i.e. gallery-service).
# They should be only accessed through the path defined below.
# Link: https://stackoverflow.com/questions/46317388/zuul-service-name-exposed-instead-of-route-path-only
zuul.ignored-services=*

# Map paths to services
zuul.routes.favorite-service.path=/favorite/**
zuul.routes.favorite-service.service-id=FAVORITE-SERVICE
zuul.routes.favorite-service.strip-prefix=false

# Map path to auth service
zuul.routes.registration-service.path=/register/**
zuul.routes.registration-service.service-id=REGISTRATION-SERVICE
# By default, all requests to gallery service for example will start with: "/gallery/"
# What will be sent to the gallery service is what comes after the path defined, 
# So, if request is "/gallery/view/1", gallery service will get "/view/1".
# In case of auth, we need to pass the "/auth/" in the path to auth service. So, set strip-prefix to false
zuul.routes.registration-service.strip-prefix=false
# Exclude authorization from sensitive headers
zuul.routes.registration-service.sensitive-headers=Cookie,Set-Cookie 


# Map path to login service
zuul.routes.login-service.path=/signin/**
zuul.routes.login-service.service-id=LOGIN-SERVICE
# By default, all requests to gallery service for example will start with: "/gallery/"
# What will be sent to the gallery service is what comes after the path defined, 
# So, if request is "/gallery/view/1", gallery service will get "/view/1".
# In case of auth, we need to pass the "/auth/" in the path to auth service. So, set strip-prefix to false
zuul.routes.login-service.strip-prefix=false
# Exclude authorization from sensitive headers
zuul.routes.login-service.sensitive-headers=Cookie,Set-Cookie 


#management.endpoints.web.cors.allowed-headers=*
#management.endpoints.web.cors.allowed-methods=*
#management.endpoints.web.cors.allow-credentials=true
#management.endpoints.web.cors.allowed-origins=*

zuul.sensitive-headers=
zuul.ignored-headers=Access-Control-Allow-Credentials, Access-Control-Allow-Origin





#In the gateway, we need to do two things: (1) validate tokens with every request, and 
#(2) prevent all unauthenticated requests to our services. Fair enough?
#
#In the auth service, we need to (1) validate the user credentials, 
#and if valid, (2) generate a token, otherwise, throw an exception.